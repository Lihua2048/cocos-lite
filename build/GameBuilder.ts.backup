import { SceneData, Entity, Animation, SceneCompositionState } from '../core/types';
import { WebGLRenderer } from '../core/2d/webgl-renderer';
import { physicsWorld } from '../core/physics';
import ResourceManager from '../core/resources/ResourceManager';

/**
 * 游戏打包构建器
 * 将编辑器场景数据转换为可运行的游戏      '    // 绘制文本 - 匹配编辑器SDF字体渲染效果',
      '    if (text && type.startsWith("ui-")) {',
      '      // 使用与编辑器一致的文本颜色和字体设置',
      '      if (properties.textColor && Array.isArray(properties.textColor)) {',
      '        this.ctx.fillStyle = "rgba(" + Math.floor(properties.textColor[0] * 255) + ", " + Math.floor(properties.textColor[1] * 255) + ", " + Math.floor(properties.textColor[2] * 255) + ", " + (properties.textColor[3] || 1) + ")";',
      '      } else {',
      '        this.ctx.fillStyle = "#000"; // 默认黑色文本',
      '      }',
      '      ',
      '      const fontSize = properties.fontSize || 16;',
      '      this.ctx.font = fontSize + "px Arial";',
      '      ',
      '      // 文本对齐方式',
      '      const textAlign = properties.textAlign || "left";',
      '      this.ctx.textAlign = textAlign;',
      '      ',
      '      // 垂直对齐 - 匹配编辑器的verticalAlign逻辑',
      '      const verticalAlign = properties.verticalAlign || "middle";',
      '      let textX = x;',
      '      let textY = y;',
      '      ',
      '      // 水平对齐调整',
      '      if (textAlign === "center") {',
      '        textX = x + entityWidth / 2;',
      '      } else if (textAlign === "right") {',
      '        textX = x + entityWidth - 5; // 右对齐留一点边距',
      '      } else {',
      '        textX = x + 5; // 左对齐留一点边距',
      '      }',
      '      ',
      '      // 垂直对齐调整',
      '      if (verticalAlign === "middle") {',
      '        textY = y + entityHeight / 2 + fontSize / 3; // 中间对齐',
      '      } else if (verticalAlign === "bottom") {',
      '        textY = y + entityHeight - 5; // 底部对齐',
      '      } else {',
      '        textY = y + fontSize; // 顶部对齐',
      '      }',
      '      ',
      '      this.ctx.fillText(text, textX, textY);',
      '      console.log("SimpleGame: 绘制文本完成:", { text, x: textX, y: textY, align: textAlign, vAlign: verticalAlign });',
      '    }',
      '',
      '    // 注意：编辑器中实体没有边框，所以这里也不绘制边框',
      '    // this.ctx.strokeRect(x, y, entityWidth, entityHeight); // 已移除', GameBuilder {
  private sceneData: SceneData[];
  private resourceManager: ResourceManager;
  private outputDir: string;
  private sceneComposition?: SceneCompositionState;

  constructor(scenes: SceneData[], resourceManager: ResourceManager, outputDir: string = './game', sceneComposition?: SceneCompositionState) {
    this.sceneData = scenes;
    this.resourceManager = resourceManager;
    this.outputDir = outputDir;
    this.sceneComposition = sceneComposition;
  }

  /**
   * 构建 H5 游戏
   */
  async buildH5Game(): Promise<any> {
    console.log('开始构建 H5 游戏...');
    console.log('场景数据:', this.sceneData.map(s => ({
      id: s.id,
      name: s.name,
      entityCount: Object.keys(s.entities).length,
      entities: Object.keys(s.entities)
    })));

    // 1. 生成游戏运行时代码
    const gameRuntime = this.generateGameRuntime();

    // 2. 生成场景数据文件
    const sceneDataFile = this.generateSceneDataFile();

    // 3. 生成包含游戏代码的完整HTML文件
    const completeHTML = this.generateCompleteHTML(gameRuntime);

    // 4. 复制资源文件
    await this.copyResources('h5');

    // 5. 生成构建配置
    const buildConfig = this.generateBuildConfig('h5');

    console.log('H5 游戏构建完成！');
    console.log('场景数据已生成:', JSON.parse(sceneDataFile));

    // 6. 直接打开游戏页面
    this.openGamePage(completeHTML);

    return {
      gameRuntime,
      sceneDataFile,
      htmlTemplate: completeHTML,
      buildConfig
    };
  }

  /**
   * 构建微信小游戏
   */
  async buildWechatGame(): Promise<any> {
    console.log('开始构建微信小游戏...');

    // 1. 生成游戏运行时代码（小游戏版本）
    const gameRuntime = this.generateGameRuntime('wechat');

    // 2. 生成小游戏配置文件
    const gameConfig = this.generateWechatGameConfig();

    // 3. 生成场景数据文件
    const sceneDataFile = this.generateSceneDataFile();

    // 4. 复制资源文件
    await this.copyResources('wechat');

    // 5. 生成适配器代码
    const adapter = this.generateWechatAdapter();

    console.log('微信小游戏构建完成！');

    return {
      gameRuntime,
      gameConfig,
      sceneDataFile,
      adapter
    };
  }

  /**
   * 生成游戏运行时代码
   */
  private generateGameRuntime(platform: 'h5' | 'wechat' = 'h5'): string {
    // 首先生成场景数据
    const gameData = {
      scenes: this.sceneData,
      metadata: {
        buildTime: new Date().toISOString(),
        version: '1.0.0',
        totalScenes: this.sceneData.length
      }
    };

    const gameRuntimeCode = [
      '// 游戏运行时 - ' + platform,
      '// 简化版本，直接在浏览器中运行',
      '',
      '// 嵌入游戏数据',
      'const gameData = ' + JSON.stringify(gameData) + ';',
      'console.log("游戏数据已嵌入，场景数量:", gameData.scenes.length);',
      'gameData.scenes.forEach((scene, index) => {',
      '  console.log("场景 " + (index + 1) + ":", scene.name, "实体数量:", Object.keys(scene.entities || {}).length);',
      '});',
      '',
      'class SimpleGame {',
      '  constructor() {',
      '    this.canvas = null;',
      '    this.ctx = null;',
      '    this.sceneData = null;',
      '    this.currentScene = null;',
      '    this.entities = [];',
      '    this.animationId = null;',
      '  }',
      '',
      '  async init() {',
      '    console.log("SimpleGame: 开始初始化游戏...");',
      '',
      '    // 获取Canvas',
      '    this.canvas = document.getElementById("gameCanvas");',
      '    if (!this.canvas) {',
      '      console.error("SimpleGame: 找不到游戏Canvas");',
      '      document.body.innerHTML += "<div style=\\"color: red; font-size: 20px;\\">错误：找不到游戏Canvas</div>";',
      '      return;',
      '    }',
      '',
      '    console.log("SimpleGame: Canvas找到，尺寸:", this.canvas.width, "x", this.canvas.height);',
      '    this.ctx = this.canvas.getContext("2d");',
      '',
      '    // 加载场景数据（已通过loadData方法传入）',
      '    console.log("SimpleGame: 场景数据状态:", {',
      '      hasSceneData: !!this.sceneData,',
      '      sceneCount: this.sceneData?.scenes?.length || 0',
      '    });',
      '',
      '    // 隐藏加载文字',
      '    const loading = document.getElementById("loading");',
      '    if (loading) loading.style.display = "none";',
      '',
      '    console.log("SimpleGame: 游戏初始化完成");',
      '  }',
      '',
      '  loadData(data) {',
      '    console.log("SimpleGame: 开始加载传入的数据:", data);',
      '    if (data && data.scenes) {',
      '      this.sceneData = data;',
      '      console.log("SimpleGame: 场景数据加载成功，场景数量:", data.scenes.length);',
      '      data.scenes.forEach((scene, index) => {',
      '        console.log("场景 " + (index + 1) + ":", {',
      '          name: scene.name,',
      '          entityCount: Object.keys(scene.entities || {}).length,',
      '          entities: Object.keys(scene.entities || {})  ',
      '        });',
      '      });',
      '    } else {',
      '      console.error("SimpleGame: 传入的数据无效:", data);',
      '    }',
      '  }',
      '',
      '  start() {',
      '    console.log("开始游戏");',
      '',
      '    // 加载第一个场景',
      '    if (this.sceneData && this.sceneData.scenes && this.sceneData.scenes.length > 0) {',
      '      this.loadScene(this.sceneData.scenes[0]);',
      '    }',
      '',
      '    // 开始渲染循环',
      '    this.gameLoop();',
      '  }',
      '',
      '  loadScene(scene) {',
      '    console.log("SimpleGame: 开始加载场景:", scene.name);',
      '    console.log("SimpleGame: 场景实体数据:", scene.entities);',
      '    console.log("SimpleGame: 实体数量:", Object.keys(scene.entities || {}).length);',
      '',
      '    this.currentScene = scene;',
      '    this.entities = Object.values(scene.entities || {});',
      '',
      '    console.log("SimpleGame: 转换后的实体数组:", this.entities);',
      '    console.log("SimpleGame: 每个实体的详细信息:");',
      '    this.entities.forEach((entity, index) => {',
      '      console.log("实体 " + index + ":", {',
      '        id: entity.id,',
      '        type: entity.type,',
      '        position: entity.position,',
      '        properties: entity.properties',
      '      });',
      '    });',
      '',
      '    // 更新页面标题',
      '    document.title = scene.name + " - Cocos Game";',
      '  }',
      '',
      '  gameLoop() {',
      '    // 清空画布 - 使用深灰色背景便于看到实体',
      '    this.ctx.fillStyle = "#333";',
      '    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);',
      '',
      '    // 渲染实体',
      '    if (this.entities && this.entities.length > 0) {',
      '      console.log("SimpleGame: 开始渲染", this.entities.length, "个实体");',
      '      console.log("SimpleGame: Canvas尺寸:", this.canvas.width, "x", this.canvas.height);',
      '      this.entities.forEach((entity, index) => {',
      '        console.log("SimpleGame: 渲染实体索引", index, ":", entity);',
      '        this.renderEntity(entity);',
      '      });',
      '      console.log("SimpleGame: 所有实体渲染完成");',
      '    } else {',
      '      console.log("SimpleGame: 没有实体需要渲染");',
      '    }',
      '',
      '    // 显示场景信息',
      '    this.ctx.fillStyle = "#fff";',
      '    this.ctx.font = "16px Arial";',
      '    this.ctx.fillText("场景: " + (this.currentScene ? this.currentScene.name : "无"), 10, 25);',
      '    this.ctx.fillText("实体数量: " + (this.entities ? this.entities.length : 0), 10, 45);',
      '',
      '    // 继续循环 - 确保正确绑定this上下文',
      '    const self = this;',
      '    this.animationId = requestAnimationFrame(function() { self.gameLoop(); });',
      '  }',
      '',
      '  renderEntity(entity) {',
      '    if (!entity || !entity.position || !entity.properties) {',
      '      console.log("SimpleGame: 跳过无效实体:", entity);',
      '      return;',
      '    }',
      '',
      '    const { position, properties, type } = entity;',
      '    let { x, y } = position;',
      '    const { width, height, color, text } = properties;',
      '',
      '    // 确保实体在Canvas范围内可见',
      '    const entityWidth = width || 100;',
      '    const entityHeight = height || 50;',
      '    ',
      '    // 如果实体超出Canvas范围，将其调整到可见区域',
      '    if (x < 0 || x >= this.canvas.width - entityWidth) {',
      '      x = Math.max(0, Math.min(this.canvas.width - entityWidth, x));',
      '      console.log("SimpleGame: 实体X坐标超出范围，调整为:", x);',
      '    }',
      '    if (y < 0 || y >= this.canvas.height - entityHeight) {',
      '      y = Math.max(0, Math.min(this.canvas.height - entityHeight, y));',
      '      console.log("SimpleGame: 实体Y坐标超出范围，调整为:", y);',
      '    }',
      '',
      '    console.log("SimpleGame: 渲染实体:", {',
      '      id: entity.id,',
      '      type: type,',
      '      originalPosition: position,',
      '      adjustedPosition: { x, y },',
      '      size: { width: entityWidth, height: entityHeight },',
      '      text: text,',
      '      color: color',
      '    });',
      '',
      '    // 保存上下文',
      '    this.ctx.save();',
      '',
      '    // 绘制背景 - 匹配编辑器WebGL渲染样式',
      '    if (color && Array.isArray(color) && color.length >= 3) {',
      '      this.ctx.fillStyle = "rgba(" + Math.floor(color[0] * 255) + ", " + Math.floor(color[1] * 255) + ", " + Math.floor(color[2] * 255) + ", " + (color[3] || 1) + ")";',
      '      console.log("SimpleGame: 使用实体颜色:", this.ctx.fillStyle);',
      '    } else {',
      '      // 为不同类型设置与编辑器一致的默认颜色',
      '      if (type === "sprite") {',
      '        this.ctx.fillStyle = "rgba(255, 255, 255, 1)"; // 白色，与WebGL一致',
      '      } else if (type.startsWith("ui-")) {',
      '        this.ctx.fillStyle = "rgba(200, 200, 200, 1)"; // 浅灰色，与编辑器UI组件一致',
      '      } else {',
      '        this.ctx.fillStyle = "rgba(128, 128, 128, 1)"; // 中灰色',
      '      }',
      '      console.log("SimpleGame: 使用默认颜色 (" + type + "):", this.ctx.fillStyle);',
      '    }',
      '',
      '    this.ctx.fillRect(x, y, entityWidth, entityHeight);',
      '    console.log("SimpleGame: 绘制矩形完成:", { x, y, width: entityWidth, height: entityHeight });',
      '',
      '    // 绘制文本 - 匹配编辑器SDF字体渲染效果',
      '    if (text && type.startsWith("ui-")) {',
      '      if (properties.textColor) {',
      '        this.ctx.fillStyle = "rgba(" + Math.floor(properties.textColor[0] * 255) + ", " + Math.floor(properties.textColor[1] * 255) + ", " + Math.floor(properties.textColor[2] * 255) + ", " + (properties.textColor[3] || 1) + ")";',
      '      } else {',
      '        this.ctx.fillStyle = "#000";',
      '      }',
      '      this.ctx.font = (properties.fontSize || 16) + "px Arial";',
      '      this.ctx.textAlign = properties.textAlign || "left";',
      '      this.ctx.fillText(text, x + 5, y + entityHeight/2 + 5);',
      '      console.log("SimpleGame: 绘制文本完成:", text);',
      '    }',
      '',
      '    // 绘制边框',
      '    this.ctx.strokeStyle = "#666";',
      '    this.ctx.lineWidth = 2; // 增加边框粗细使其更可见',
      '    this.ctx.strokeRect(x, y, entityWidth, entityHeight);',
      '    console.log("SimpleGame: 绘制边框完成");',
      '',
      '    // 恢复上下文',
      '    this.ctx.restore();',
      '  }',
      '',
      '  stop() {',
      '    if (this.animationId) {',
      '      cancelAnimationFrame(this.animationId);',
      '      this.animationId = null;',
      '    }',
      '  }',
      '}'
    ];

    // 添加平台特定的启动代码
    if (platform === 'wechat') {
      gameRuntimeCode.push('');
      gameRuntimeCode.push('// 微信小游戏适配');
      gameRuntimeCode.push('const game = new SimpleGame();');
      gameRuntimeCode.push('wx.onShow(() => {');
      gameRuntimeCode.push('  game.init().then(() => game.start());');
      gameRuntimeCode.push('});');
      gameRuntimeCode.push('window.game = game;');
    } else {
      gameRuntimeCode.push('');
      gameRuntimeCode.push('// H5版本启动代码');
      gameRuntimeCode.push('async function startGame() {');
      gameRuntimeCode.push('  console.log("H5: 启动游戏，创建 SimpleGame 实例");');
      gameRuntimeCode.push('  const game = new SimpleGame();');
      gameRuntimeCode.push('  console.log("H5: 游戏实例创建完成，开始加载数据");');
      gameRuntimeCode.push('  console.log("H5: 游戏数据:", gameData);');
      gameRuntimeCode.push('  game.loadData(gameData);');
      gameRuntimeCode.push('  console.log("H5: 数据加载完成，初始化游戏");');
      gameRuntimeCode.push('  await game.init();');
      gameRuntimeCode.push('  console.log("H5: 游戏初始化完成，启动游戏循环");');
      gameRuntimeCode.push('  game.start();');
      gameRuntimeCode.push('  window.game = game;');
      gameRuntimeCode.push('  console.log("H5: 游戏完全启动成功");');
      gameRuntimeCode.push('}');
      gameRuntimeCode.push('');
      gameRuntimeCode.push('// 等待DOM加载完成后启动游戏');
      gameRuntimeCode.push('if (document.readyState === "loading") {');
      gameRuntimeCode.push('  document.addEventListener("DOMContentLoaded", startGame);');
      gameRuntimeCode.push('} else {');
      gameRuntimeCode.push('  startGame();');
      gameRuntimeCode.push('}');
    }

    // 添加全局导出
    gameRuntimeCode.push('');
    gameRuntimeCode.push('// 全局游戏实例');
    gameRuntimeCode.push('window.SimpleGame = SimpleGame;');

    return gameRuntimeCode.join('\n');
  }

  /**
   * 生成场景数据文件
   */
  private generateSceneDataFile(): string {
    const exportData = {
      scenes: this.sceneData,
      metadata: {
        buildTime: new Date().toISOString(),
        version: '1.0.0',
        totalScenes: this.sceneData.length
      }
    };

    return JSON.stringify(exportData, null, 2);
  }

  /**
   * 生成包含游戏代码的完整HTML文件
   */
  private generateCompleteHTML(gameRuntime: string): string {
    return [
      '<!DOCTYPE html>',
      '<html lang="zh-CN">',
      '<head>',
      '    <meta charset="UTF-8">',
      '    <meta name="viewport" content="width=device-width, initial-scale=1.0">',
      '    <title>Cocos Game</title>',
      '    <style>',
      '        body {',
      '            margin: 0;',
      '            padding: 0;',
      '            display: flex;',
      '            justify-content: center;',
      '            align-items: center;',
      '            min-height: 100vh;',
      '            background: #000;',
      '            font-family: Arial, sans-serif;',
      '        }',
      '        #gameCanvas {',
      '            border: 1px solid #333;',
      '            background: #222;',
      '        }',
      '        #loading {',
      '            position: absolute;',
      '            color: white;',
      '            font-size: 18px;',
      '        }',
      '    </style>',
      '</head>',
      '<body>',
      '    <div id="loading">正在加载游戏...</div>',
      '    <canvas id="gameCanvas" width="800" height="600"></canvas>',
      '    ',
      '    <script>',
      '        // 游戏运行时代码',
      '        ' + gameRuntime,
      '    </script>',
      '</body>',
      '</html>'
    ].join('\n');
  }

  /**
   * 在新窗口中打开游戏页面
   */
  private openGamePage(htmlContent: string): void {
    if (typeof window === 'undefined') return;

    // 创建 Blob URL
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = window.URL.createObjectURL(blob);

    // 在新窗口中打开游戏
    const gameWindow = window.open(url, '_blank', 'width=820,height=640,resizable=yes');

    if (gameWindow) {
      console.log('游戏页面已在新窗口中打开');
      // 延迟释放URL，确保页面加载完成
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
      }, 5000);
    } else {
      console.error('无法打开游戏窗口，可能被浏览器阻止弹窗');
      // 备用方案：提供下载链接
      this.downloadFile('game.html', htmlContent);
    }
  }

  /**
   * 生成 HTML 模板
   */
  private generateHTMLTemplate(): string {
    return [
      '<!DOCTYPE html>',
      '<html lang="zh-CN">',
      '<head>',
      '    <meta charset="UTF-8">',
      '    <meta name="viewport" content="width=device-width, initial-scale=1.0">',
      '    <title>Cocos Game</title>',
      '    <style>',
      '        body {',
      '            margin: 0;',
      '            padding: 0;',
      '            display: flex;',
      '            justify-content: center;',
      '            align-items: center;',
      '            min-height: 100vh;',
      '            background: #000;',
      '            font-family: Arial, sans-serif;',
      '        }',
      '        #gameCanvas {',
      '            border: 1px solid #333;',
      '            background: #222;',
      '        }',
      '        #loading {',
      '            position: absolute;',
      '            color: white;',
      '            font-size: 18px;',
      '        }',
      '    </style>',
      '</head>',
      '<body>',
      '    <div id="loading">正在加载游戏...</div>',
      '    <canvas id="gameCanvas" width="800" height="600"></canvas>',
      '    ',
      '    <!-- 游戏代码将在这里注入 -->',
      '</body>',
      '</html>'
    ].join('\n');
  }

  /**
   * 生成微信小游戏配置
   */
  private generateWechatGameConfig(): string {
    return JSON.stringify({
      "deviceOrientation": "portrait",
      "showStatusBar": false,
      "networkTimeout": {
        "request": 10000,
        "connectSocket": 10000,
        "uploadFile": 10000,
        "downloadFile": 10000
      },
      "subpackages": [],
      "workers": "workers",
      "requiredPrivateInfos": [],
      "permission": {
        "scope.userLocation": {
          "desc": "你的位置信息将用于小游戏位置接口的效果展示"
        }
      },
      "plugins": {},
      "resizable": false
    }, null, 2);
  }

  /**
   * 生成微信适配器
   */
  private generateWechatAdapter(): string {
    return [
      '// 微信小游戏适配器',
      '// 适配 DOM API',
      'if (!global.document) {',
      '  global.document = {',
      '    createElement: (tag) => {',
      '      if (tag === "canvas") return wx.createCanvas();',
      '      return {};',
      '    },',
      '    getElementById: () => wx.createCanvas(),',
      '  };',
      '}',
      '',
      '// 适配 Window API',
      'if (!global.window) {',
      '  global.window = global;',
      '  global.window.devicePixelRatio = wx.getSystemInfoSync().pixelRatio;',
      '  global.window.requestAnimationFrame = wx.requestAnimationFrame || ((cb) => setTimeout(cb, 16));',
      '  global.window.cancelAnimationFrame = wx.cancelAnimationFrame || clearTimeout;',
      '}',
      '',
      '// 适配 Image API',
      'if (!global.Image) {',
      '  global.Image = () => wx.createImage();',
      '}',
      '',
      '// 适配 Audio API',
      'if (!global.Audio) {',
      '  global.Audio = (src) => {',
      '    const audio = wx.createInnerAudioContext();',
      '    if (src) audio.src = src;',
      '    return audio;',
      '  };',
      '}',
      '',
      'console.log("微信小游戏适配器加载完成");'
    ].join('\n');
  }

  /**
   * 生成构建配置
   */
  private generateBuildConfig(platform: 'h5' | 'wechat'): any {
    if (platform === 'h5') {
      return {
        type: 'h5',
        entry: './game.js',
        output: {
          path: './dist',
          filename: 'game.min.js'
        },
        optimization: {
          minimize: true
        }
      };
    } else {
      return {
        type: 'wechat',
        entry: './game.js',
        output: {
          path: './dist',
          filename: 'game.js'
        },
        adapter: './adapter.js'
      };
    }
  }

  /**
   * 复制资源文件
   */
  private async copyResources(platform: 'h5' | 'wechat'): Promise<void> {
    // 这里需要复制纹理、字体、音频等资源文件
    console.log('复制 ' + platform + ' 平台资源文件...');

    // 复制 SDF 字体文件
    const sdfFontFiles = [
      '../core/2d/sdf-font/roboto-msdf.json',
      '../core/2d/sdf-font/roboto-msdf.png'
    ];

    // 复制纹理资源
    const textureFiles = this.resourceManager.getAllTextures();

    console.log('资源文件复制完成');
  }

  /**
   * 写入文件到输出目录 (浏览器版本 - 模拟写入)
   */
  private async writeFiles(files: Record<string, string>): Promise<void> {
    console.log('构建文件准备完成:');

    for (const [filePath, content] of Object.entries(files)) {
      console.log('文件: ' + filePath + ' (' + content.length + ' 字符)');

      // 在浏览器环境中，我们将文件内容存储到localStorage或直接提供下载
      if (typeof window !== 'undefined') {
        // 存储到localStorage便于调试
        localStorage.setItem('build_' + filePath.replace(/[\/\\]/g, '_'), content);

        // 如果是主要文件，提供下载链接
        if (filePath === 'index.html' || filePath === 'data/scenes.json') {
          this.downloadFile(filePath, content);
        }
      }
    }

    console.log('所有文件已准备完成，可通过浏览器开发者工具查看localStorage中的build_*项目');
  }

  /**
   * 在浏览器中下载文件
   */
  private downloadFile(filename: string, content: string): void {
    if (typeof window === 'undefined') return;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename.replace(/[\/\\]/g, '_');
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }
}

export default GameBuilder;
